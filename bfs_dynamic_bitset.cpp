
//=================================================================================================================
// TODO:
// -> Estrutura de marcação de vértices.	======> BITSET PARA OS VÉRTICES MARCADOS!!!!
// -> função marcar vértice. 				======> BITSET.set(i)
// -> função desmarcar vértice.				======> BITSET.reset(i)
// ->
//=================================================================================================================

//-----------------------------------------------------------------------------------------------------------------

//=================================================================================================================
//	Notas:
//  bitset::test(pos) => retorna true if bit at position pos
//
//=================================================================================================================

//-----------------------------------------------------------------------------------------------------------------

//=================================================================================================================
// Bibliotecas:

#include <vector>
#include <queue>
#include <boost/dynamic_bitset> 								// Bitset de tamanho dinâmico. boost.org library. OpenSource


//=================================================================================================================

//-----------------------------------------------------------------------------------------------------------------

//=================================================================================================================
// Variáveis:

#define GRAFO Graph
#define VERTICE Vertex
#define NUMERO_DE_VERTICES numVertex
#define BITSET_VISITADOS visitados // Dinâmico. => dynamic_bitset& #func();

//=================================================================================================================

//-----------------------------------------------------------------------------------------------------------------

//=================================================================================================================
// Função: BFS - Breadth First Search
// Parâmetros: Grafo, vértice raiz.
// Retorna: int (ERROS)
//
//-----------------------------------------------------------------------------------------------------------------
// Possiveis problemas:
//
//-----------------------------------------------------------------------------------------------------------------
// TODO:
//
//=================================================================================================================



int bfs(GRAFO, VERTICE){
	G.BITSET_VISITADOS& reset();								// Desmarca todos os vertices de G ======> BITSET_VISITADOS.reset();
	std::queue<int> Q;											// Inicializa a lista Q vazia
	BITSET_VISITADOS& set(s, true);								// Marca s como visitado
	Q.push(s);													// Inserir s em Q
	while (Q.empty){											// Inicio do loop. Só para quando Q for vazia
		Q.pop();
		for (i = 0; i <= BITSET_VISITADOS.size(); i++){
			if (BITSET_VISITADOS[i] == 1){
				if (BITSET_VISITADOS[i].marked() == false){
					BITSET_VISITADOS& set(i, true); // mark(bitset[i]);
					Q.push(i);
				}
			}
		}
	}


}